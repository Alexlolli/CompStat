theme(legend.position = "none")
ggplot(benchdata, aes(x = n, y = time, color = fun)) +
geom_abline(intercept = exp(1), slope = 1, color = "gray", linetype = 2) +
stat_summary(fun.y = "median", geom = "line") +
stat_summary(fun.y = "median", geom = "point") +
facet_wrap(~ "Bandwidth calculation time") +
scale_x_continuous(trans = "log2") +
scale_y_continuous("Time (ms)", trans = "log",
breaks = c(1e2,1e4,1e5, 1e6, 1e7, 1e8),
labels = c("0.001", "0.01", "0.1", "1", "10", "100")) +
scale_color_discrete("Function:") +
theme(legend.position="top")
ggplot(benchdata, aes(x = n, y = time, color = fun)) +
geom_abline(intercept = exp(1), slope = 1, color = "gray", linetype = 2) +
stat_summary(fun.y = "median", geom = "line") +
stat_summary(fun.y = "median", geom = "point") +
facet_wrap(~ "Bandwidth calculation time") +
scale_x_continuous(trans = "log2") +
scale_y_continuous("Time (ms)", trans = "log2",
breaks = c(1e2,1e4,1e5, 1e6, 1e7, 1e8),
labels = c("0.001", "0.01", "0.1", "1", "10", "100")) +
scale_color_discrete("Method:") +
theme(legend.position="top")
ggplot(benchdata, aes(x = n, y = time, color = fun)) +
geom_abline(intercept = 2, slope = 1, color = "gray", linetype = 2) +
stat_summary(fun.y = "median", geom = "line") +
stat_summary(fun.y = "median", geom = "point") +
facet_wrap(~ "Bandwidth calculation time") +
scale_x_continuous(trans = "log2") +
scale_y_continuous("Time (ms)", trans = "log2",
breaks = c(1e2,1e4,1e5, 1e6, 1e7, 1e8),
labels = c("0.001", "0.01", "0.1", "1", "10", "100")) +
scale_color_discrete("Method:") +
theme(legend.position="top")
ggplot(benchdata, aes(x = n, y = time, color = fun)) +
geom_abline(intercept = 7.5, slope = 1, color = "gray", linetype = 2) +
stat_summary(fun.y = "median", geom = "line") +
stat_summary(fun.y = "median", geom = "point") +
facet_wrap(~ "Bandwidth calculation time") +
scale_x_continuous(trans = "log2") +
scale_y_continuous("Time (ms)", trans = "log2",
breaks = c(1e2,1e4,1e5, 1e6, 1e7, 1e8),
labels = c("0.001", "0.01", "0.1", "1", "10", "100")) +
scale_color_discrete("Method:") +
theme(legend.position="top")
ggplot(benchdata, aes(x = n, y = time, color = fun)) +
geom_abline(intercept = 7.5, slope = 1, color = "gray", linetype = 2) +
stat_summary(fun.y = "median", geom = "line") +
stat_summary(fun.y = "median", geom = "point") +
facet_wrap(~ "Bandwidth calculation time") +
scale_x_continuous(trans = "log2") +
scale_y_continuous("Time (ms)", trans = "log2",
breaks = c(1e3, 1e4,1e5, 1e6, 1e7, 1e8),
labels = c("0.001", "0.01", "0.1", "1", "10", "100")) +
scale_color_discrete("Method:") +
theme(legend.position="top")
ggplot(benchdata, aes(x = n, y = time, color = fun)) +
geom_abline(intercept = 7.5, slope = 1, color = "gray", linetype = 2) +
stat_summary(fun.y = "median", geom = "line") +
stat_summary(fun.y = "median", geom = "point") +
facet_wrap(~ "Bandwidth calculation time") +
scale_x_continuous(trans = "log2") +
scale_y_continuous("Time (s)", trans = "log2",
breaks = c(1e3, 1e4,1e5, 1e6, 1e7, 1e8),
labels = c("0.001", "0.01", "0.1", "1", "10", "100")) +
scale_color_discrete("Method:") +
theme(legend.position="top")
kern_benchmarks
expr_list
band_width(x[1:2048], K = Ep_kern, method = "LOOCV")
band_width(x[1:2048], K = Ep_kern, method = "LOOCV")
band_width(x[1:2^5], K = Ep_kern, method = "LOOCV")
system.time(band_width(x[1:2^5], K = Ep_kern, method = "LOOCV"))
system.time(band_width(x[1:2^11], K = Ep_kern, method = "LOOCV"))
system.time(band_width(x[1:2^11], K = Ep_kern, method = "LOOCV"))
system.time(band_width(x[1:2^10], K = Ep_kern, method = "LOOCV"))
system.time(band_width(x[1:2^10], K = Ep_kern, method = "LOOCV"))
set.seed(1234)
MM_var<-rbinom(Nsim, size = 1,p=0.5) #Bernouilli variables
x <- (1-MM_var)* rnorm(Nsim, mean = par_1[1], sd = par_1[2]) +
MM_var * rnorm(Nsim, mean = par_2[1], sd = par_2[2])
conf <- expand.grid(
fun = c("silverman", "epanechnikov", "gauss", "LOOCV"),
n = 2^(5:12)
)
calls <- paste0('band_width(x[1:', conf[, 2], '], K = Ep_kern, method= "',conf[, 1], '" )', sep = '')
expr_list <- lapply(calls, function(x) parse(text = x)[[1]])
kern_benchmarks <- microbenchmark(list = expr_list, times = 40L)
G_kern <-my_Kernel(K=expression(1/sqrt(2*pi)*exp(-x^2/2)),range = c(-Inf, Inf))
G_kern <-my_Kernel(K=expression(1/sqrt(2*pi)*exp(-x^2/2)),rng = c(-Inf, Inf))
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
par(mfrow = c(1, 2))
plot(density(log(F12), kernel = "epanechnikov")$y, type = "l", col = "red",
xlab = "x", ylab = "Density", lwd = 4)
lines(density.myKernel(myKernel_ep, log(F12), bw = bw_dens)$y,
col = "blue", lwd = 2)
knitr::opts_chunk$set(cache = TRUE, fig.width = 8, fig.height = 6, comment = NA, dev.args = list(bg = 'transparent'), fig.align = "center")
source("Assignment-1-S3.R")
myKernel_ep <- myKernel(K = expression(3 / 4 * (1 - x^2)),
rng = c(-1, 1))
myKernel_ep <- myKernel(K = expression(3 / 4 * (1 - x^2 / 5) / sqrt(5)),
rng=c(-sqrt(5), sqrt(5)))
myKernel_gauss <- myKernel(K = expression(1 / (sqrt(2 * pi)) * exp(-x^2 / 2)),
rng = c(-Inf, Inf))
infrared <- read.table("infrared.txt", header = TRUE)
F12 <- infrared$F12
density(log(F12), kernel = "epanechnikov")$bw
density(log(F12), kernel = "gaussian")$bw
bandwidth.myKernel(myKernel_ep, log(F12), method = "silverman")
bandwidth.myKernel(myKernel_gauss, log(F12), method = "silverman")
bw_dens <- density(log(F12))$bw
range(density(log(F12), kernel = "epanechnikov")$y -
density.myKernel(myKernel_ep, log(F12), bw = bw_dens)$y)
density.myKernel(myKernel_ep, log(F12), bw = bw_dens)$y
density.myKernel(myKernel_ep, log(F12), bw = bw_dens)$y
par(mfrow = c(1, 2))
plot(density(log(F12), kernel = "epanechnikov")$y, type = "l", col = "red",
xlab = "x", ylab = "Density", lwd = 4)
lines(density.myKernel(myKernel_ep, log(F12), bw = bw_dens)$y,
col = "blue", lwd = 2)
plot(density(log(F12), kernel = "epanechnikov")$y -
density.myKernel(myKernel_ep, log(F12), bw = bw_dens)$y,
type = "l", lwd = 1,
ylab = "Difference", xlab = "x", main = "")
par(mfrow = c(1, 1))
bandwidth_bench <-microbenchmark(band_width(log(F12),Ep_kern,method="silverman"),
band_width(log(F12),Ep_kern,method="epanechnikov"),
band_width(log(F12),Ep_kern,method="gauss"),
band_width(log(F12),Ep_kern,method="LOOCV"))
cf <- coord_fixed()
cf$default <- TRUE
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
cf +
aes(fill = I("gray")) +
theme(legend.position = "none")
bandwidth_bench <-microbenchmark(band_width(log(F12),Ep_kern,method="silverman"),
band_width(log(F12),Ep_kern,method="epanechnikov"),
band_width(log(F12),Ep_kern,method="gauss"),
band_width(log(F12),Ep_kern,method="LOOCV"))
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
par(mfrow = c(1, 2))
plot(density(log(F12), kernel = "epanechnikov")$y, type = "l", col = "red",
xlab = "x", ylab = "Density", lwd = 4)
lines(density.myKernel(myKernel_ep, log(F12), bw = bw_dens)$y,
col = "blue", lwd = 2)
plot(density(log(F12), kernel = "epanechnikov")$y -
density.myKernel(myKernel_ep, log(F12), bw = bw_dens)$y,
type = "l", lwd = 1,
ylab = "Difference", xlab = "x", main = "")
par(mfrow = c(1, 1))
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.35)
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.35)
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.35)
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.34)0.9*length(F12)^(-1/5)
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.34)*0.9*length(F12)^(-1/5)
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.34)*0.9*length(F12)^(-1/5)
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.35)*(4/3*n)^(1/5)
infrared <- read.table("infrared.txt", header = TRUE)
F12 <- infrared$F12
density(log(F12), kernel = "epanechnikov")$bw
density(log(F12), kernel = "gaussian")$bw
bandwidth.myKernel(myKernel_ep, log(F12), method = "silverman")
bandwidth.myKernel(myKernel_gauss, log(F12), method = "silverman")
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.34)*0.9*length(F12)^(-1/5)
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.35)*(4/(3*length(F12)))^(1/5)
infrared <- read.table("infrared.txt", header = TRUE)
F12 <- infrared$F12
density(log(F12), kernel = "epanechnikov")$bw
density(log(F12), kernel = "gaussian")$bw
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.34)*0.9*length(F12)^(-1/5)
bandwidth.myKernel(myKernel_ep, log(F12), method = "silverman")
bandwidth.myKernel(myKernel_gauss, log(F12), method = "silverman")
min(sd(log(F12)),as.numeric(quantile(log(F12),p=0.75)-quantile(log(F12),p=0.25))/1.35)*(4/(3*length(F12)))^(1/5)
?density
myKernel_ep <- myKernel(K = expression(3 / 4 * (1 - x^2)),
rng = c(-1, 1))
bandwidth_bench <- microbenchmark(bandwidth.myKernel(obj = myKernel_ep,
data = log(F12),
method = "silverman"),
bandwidth.myKernel(obj = myKernel_ep,
data = log(F12),
method = "plug-in",
pilot = "gauss"),
bandwidth.myKernel(obj = myKernel_ep,
data = log(F12),
method = "plug-in",
pilot = "ep"),
bandwidth.myKernel(obj = myKernel_ep,
data = log(F12),
method = "cv"))
levels(bandwidth_bench$expr) <- c("silverman", "plug-in gaussian",
"plug-in Epanechnikov", "LOOCV")
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
coord_fixed() +
coord_fixed(xlim=c(1e2,1e7)) +
theme(legend.position = "none")
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
cf +
theme(legend.position = "none")
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
autoplot(bandwidth_bench)
autoplot(bandwidth_bench)
plot.new()
autoplot(bandwidth_bench)
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
p<-autoplot(bandwidth_bench)
p +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
p<-autoplot(bandwidth_bench)
p<-autoplot(bandwidth_bench)
autoplot(bandwidth_bench)
p<-autoplot(bandwidth_bench)
p +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
set.seed(1234)
Nsim <- 2^20
par_1 <- c( 0, 1)
par_2 <- c( 6, 2)
MM_var<-rbinom(Nsim, size = 1,p=0.5) #Bernouilli variables
x <- (1-MM_var)* rnorm(Nsim, mean = par_1[1], sd = par_1[2]) +
MM_var * rnorm(Nsim, mean = par_2[1], sd = par_2[2])
conf <- expand.grid(
n = 2^(5:11),
method = c("silverman", "plug-in\", pilot = \"ep",
"plug-in\", pilot = \"gauss", "cv")
)
calls <- paste0("bandwidth.myKernel(myKernel_ep, x[1:", conf[ , 1], "],
method = \"", conf[ , 2], "\")")
expr_list <- lapply(calls, function(x) parse(text = x)[[1]])
bandwidth_bench_n <- microbenchmark(list = expr_list, times = 40L)
bench_data <- as.data.frame(cbind(conf, time = summary(bandwidth_bench_n)$median))
ggplot(data = bench_data, aes(x = n, y = median_time, group = method)) +
geom_line() + geom_point() + scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2")
ggplot(data = bench_data, aes(x = n, y = time, group = method)) +
geom_line() + geom_point() + scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2")
ggplot(bench_data, aes(x = n, y = time, color = fun)) +
geom_abline(intercept = 7.5, slope = 1, color = "gray", linetype = 2) +
stat_summary(fun.y = "median", geom = "line") +
stat_summary(fun.y = "median", geom = "point") +
facet_wrap(~ "Bandwidth calculation time") +
scale_x_continuous(trans = "log2") +
scale_y_continuous("Time (s)", trans = "log2",
breaks = c(1e3, 1e4, 1e5, 1e6, 1e7, 1e8),
labels = c("0.001", "0.01", "0.1", "1", "10", "100")) +
scale_color_discrete("Method:") +
theme(legend.position="top")
bench_data <- as.data.frame(cbind(fun=conf, time = summary(bandwidth_bench_n)$median))
ggplot(data = bench_data, aes(x = n, y = time, group = method)) +
geom_line() + geom_point() + scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2")
bench_data <- as.data.frame(cbind(conf, time = summary(bandwidth_bench_n)$median))
bench_data
conf <- expand.grid(
fun = c("silverman", "epanechnikov", "gauss", "LOOCV"),
n = 2^(5:12)
)
calls <- paste0('band_width(x[1:', conf[, 2], '], K = Ep_kern, method= "',conf[, 1], '" )', sep = '')
expr_list <- lapply(calls, function(x) parse(text = x)[[1]])
kern_benchmarks <- microbenchmark(list = expr_list, times = 40L)
bench_data$method=='plug-in", pilot = "ep'
bench_data
bench_data$method[bench_data$method=='plug-in", pilot = "ep']<-'Plug_in_epan'
bench_data$method[bench_data$method=='plug-in", pilot = "gauss']<-'Plug_in_gauss'
bench_data$method[bench_data$method=='plug-in", pilot = "ep']
bench_data$method=='plug-in", pilot = "ep'
bench_data <- as.data.frame(cbind(conf, time = summary(bandwidth_bench_n)$median))
bandwidth_bench_n <- microbenchmark(list = expr_list, times = 40L)
autoplot(bandwidth_bench) +
geom_jitter(position = position_jitter(0.2, 0),
aes(color = expr), alpha = 0.4) +
aes(fill = I("gray")) +
theme(legend.position = "none")
set.seed(1234)
Nsim <- 2^20
par_1 <- c( 0, 1)
par_2 <- c( 6, 2)
MM_var<-rbinom(Nsim, size = 1,p=0.5) #Bernouilli variables
x <- (1-MM_var)* rnorm(Nsim, mean = par_1[1], sd = par_1[2]) +
MM_var * rnorm(Nsim, mean = par_2[1], sd = par_2[2])
conf <- expand.grid(
n = 2^(5:11),
method = c("silverman", "plug-in\", pilot = \"ep",
"plug-in\", pilot = \"gauss", "cv")
)
calls <- paste0("bandwidth.myKernel(myKernel_ep, x[1:", conf[ , 1], "],
method = \"", conf[ , 2], "\")")
expr_list <- lapply(calls, function(x) parse(text = x)[[1]])
expr_list
bandwidth_bench_n <- microbenchmark(list = expr_list, times = 2L)
bench_data <- as.data.frame(cbind(conf, time = summary(bandwidth_bench_n)$median))
bench_data$method[bench_data$method=='plug-in", pilot = "ep']<-'Plug_in_epan'
bench_data <- as.data.frame(cbind(conf, time = summary(bandwidth_bench_n)$median))
bench_data$method=='plug-in", pilot = "ep'
bench_data$method[bench_data$method=='plug-in", pilot = "ep']
bench_data$method[bench_data$method=='plug-in", pilot = "ep']<-'Plug_in_epan'
bandwidth_bench_n
conf
conf$method
conf$method=='plug-in", pilot = "ep'
conf$method[conf$method=='plug-in", pilot = "ep']<-'Plug_in_epan'
conf$method[conf$method=='plug-in", pilot = "ep']<-"Plug_in_epan"
factor(conf$method)
levels(conf$method)
levels(conf$method)<-c(levels(conf$method),"Plug_in_epan","Plug_in_gauss")
levels(conf$method)
conf$method[conf$method=='plug-in", pilot = "ep']<-"Plug_in_epan"
conf$method
conf$method[conf$method=='plug-in", pilot = "gauss']<-"Plug_in_gauss"
bench_data <- as.data.frame(cbind(conf, time = summary(bandwidth_bench_n)$median))
bench_data
bandwidth_bench_n <- microbenchmark(list = expr_list, times = 2L)
levels(conf$method)<-c(levels(conf$method),"Plug_in_epan","Plug_in_gauss")
conf$method[conf$method=='plug-in", pilot = "ep']
conf$method=='plug-in", pilot = "ep'
conf$method
ggplot(data = bench_data, aes(x = n, y = time, group = method)) +
geom_line() + geom_point() + scale_x_continuous(trans = "log2") +
scale_y_continuous(trans = "log2")
ggplot(bench_data, aes(x = n, y = time, color = method)) +
geom_abline(intercept = 7.5, slope = 1, color = "gray", linetype = 2) +
stat_summary(fun.y = "median", geom = "line") +
stat_summary(fun.y = "median", geom = "point") +
facet_wrap(~ "Bandwidth calculation time") +
scale_x_continuous(trans = "log2") +
scale_y_continuous("Time (s)", trans = "log2",
breaks = c(1e3, 1e4, 1e5, 1e6, 1e7, 1e8),
labels = c("0.001", "0.01", "0.1", "1", "10", "100")) +
scale_color_discrete("Method:") +
theme(legend.position="top")
library("profvis")
source("Assignment-1-profiling-debbie.R")
source("Assignment-1-profiling-debbie.R")
bandwidth <- function(data, method = "plug-in", pilot = "gauss") {
if(method == "silverman"){
norm_K <- 0.6
sigma_K <- 0.2
IQR <- as.numeric(quantile(data, p = 0.75) -
quantile(data, p = 0.25))
sigma <- min(sd(data), IQR / 1.35)
ddf <- 1 / (2 * sqrt(pi)) * 3 / (4 * sigma^5)
h <- (norm_K / (sigma_K^2 * ddf))^(1 / 5) *
length(data)^(- 1 / 5)
}
if(method == "plug-in") {
n <- length(data)
s <- numeric(n-1)
if(pilot == "gauss") {
#first calculate silverman for gaussian as r
norm_K <- 1 / (2 * sqrt(pi))
sigma_K <- 1
IQR <- as.numeric(quantile(data, p = 0.75) -
quantile(data, p = 0.25))
sigma <- min(sd(data), IQR / 1.35)
ddf <- 1 / (2 * sqrt(pi)) * 3 / (4 * sigma^5)
r <- (norm_K / (sigma_K^2 * ddf))^(1 / 5) *
length(data)^(- 1 / 5)
# make plug in estimator of ||f||
for(i in seq_along(data[-1])){
y <- data[i] - data[(i + 1):n]
z <- 1 / (2 * sqrt(pi)) * exp(-y^2 / (4 * r^2))
zz <- 3 / 4 * r - 3 / (4 * r) * y^2
zz <- zz + y^4 / (16 * r^3)
z <- z * zz
s[i] <- sum(z)
}
diagonal <- (1 / (2 * sqrt(pi)) * 1 * (3 / 4 * r))
f <- 1 / (n^2 * r^6) * (sum(s) * 2 + n * diagonal)
# optimal bandwidth
h <- (0.6 / (0.2^2 * f))^(1 / 5) * n^(- 1 / 5)
}
if(pilot == "ep") {
#first calculate silverman for Epanechnikov as r
norm_K <- 0.6
sigma_K <- 0.2
IQR <- as.numeric(quantile(data, p=0.75) -
quantile(data, p=0.25))
sigma <- min(sd(data), IQR/ 1.35)
ddf <- 1 / (2 * sqrt(pi)) * 3 / (4 * sigma^5)
r <- (norm_K / (sigma_K^2 * ddf))^(1 / 5) *
length(data)^(- 1 / 5)
for(i in seq_along(data[-1])){
z <- pmin(data[i], data[(i + 1):n])
z <- z - pmax(data[i], data[(i + 1):n])
z <- z + 2 * r
s[i] <- sum(z * (z > 0))
}
f <- 1 / (n^2 * r^6) * 9 / 4 *
(sum(s) * 2 + n * 2 * r)
h <- (norm_K / (sigma_K^2 * f))^(1 / 5) * n^(- 1 / 5)
}
}
if(method == "cv") {
# Epanechnikov kernel
kern <- function(x)
(abs(x) <= 1) * (1 - x^2) * 3 / 4
#make the lCV function
LCV <- function(data, h) {
n <- length(data)
z <- numeric(n)
for(i in seq_along(data)) {
y <- data[-i]
z[i] <- sum(kern((data[i] - y) / h)) /
((n - 1) * h)
}
sum((z))
}
#optimize the function for h
h <- optim(par = 0.2,
fn = function(h) - LCV(data, h),
method = "Brent", lower = 0.000001,
upper = 10^3)$par
}
h
}
x <- rnorm(2^10)
profvis({bandwidth(x, method = "plug-in", pilot = "gauss")
bandwidth(x, method = "plug-in", pilot = "ep")
bandwidth(x, method = "silverman")
bandwidth(x, method = "cv")}, interval = 0.005)
library("profvis")
install.packages("profvis")
library("profvis")
source("Assignment-1-profiling-debbie.R")
source("Assignment-1-profiling-debbie.R")
x <- rnorm(2^10)
profvis({bandwidth(x, method = "plug-in", pilot = "gauss")
bandwidth(x, method = "plug-in", pilot = "ep")
bandwidth(x, method = "silverman")
bandwidth(x, method = "cv")}, interval = 0.005)
source('~/Dropbox/GitHub/CompStat/Assignment_1/Assignment-1-profiling-debbie/Assignment-1-profiling-debbie.R', echo=TRUE)
source('~/Dropbox/GitHub/CompStat/Assignment_1/Assignment-1-profiling-debbie/Assignment-1-profiling-debbie.R', echo=TRUE)
library("profvis")
source('~/Dropbox/GitHub/CompStat/Assignment_1/Assignment-1-profiling-debbie/Assignment-1-profiling-debbie.R', echo=TRUE)
x <- rnorm(2^10)
profvis({bandwidth(x, method = "plug-in", pilot = "gauss")
bandwidth(x, method = "plug-in", pilot = "ep")
bandwidth(x, method = "silverman")
bandwidth(x, method = "cv")}, interval = 0.005)
x <- rnorm(2^10)
profFile <- "prof.Rprof"
Rprof(profFile)
{bandwidth(x, method = "plug-in", pilot = "gauss")
bandwidth(x, method = "plug-in", pilot = "ep")
bandwidth(x, method = "silverman")
bandwidth(x, method = "cv")}
Rprof(NULL)
summaryRprof("prof.Rprof")
profvis({bandwidth(x, method = "plug-in", pilot = "gauss")
bandwidth(x, method = "plug-in", pilot = "ep")
bandwidth(x, method = "silverman")
bandwidth(x, method = "cv")}, interval = 0.005)
getwd()
setwd('~/Dropbox/GitHub/CompStat/Assignment_1/Assignment-1-profiling-debbie')
profFile <- "prof.html"
Rprof(profFile)
{bandwidth(x, method = "plug-in", pilot = "gauss")
bandwidth(x, method = "plug-in", pilot = "ep")
bandwidth(x, method = "silverman")
bandwidth(x, method = "cv")}
Rprof(NULL)
?profvis
profvis({bandwidth(x, method = "plug-in", pilot = "gauss")
bandwidth(x, method = "plug-in", pilot = "ep")
bandwidth(x, method = "silverman")
bandwidth(x, method = "cv")}, interval = 0.005, prof_output = "prof.html")
profvis({bandwidth(x, method = "plug-in", pilot = "gauss")
bandwidth(x, method = "plug-in", pilot = "ep")
bandwidth(x, method = "silverman")
bandwidth(x, method = "cv")}, interval = 0.005)
6*2/3
